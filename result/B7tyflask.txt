@app.route('/mysql/seismological_bureau/add_B7_VolcanicDataTable/', methods = ['POST'])
def add_B7_VolcanicDataTable():
	data = json.loads(request.get_data())
	sid = data["sid"]
	IDs = data["IDs"]
	ProjectIDs = data["ProjectIDs"]
	SamplePointIDs = data["SamplePointIDs"]
	FieldIDs = data["FieldIDs"]
	ElementTypes = data["ElementTypes"]
	Names = data["Names"]
	SvyResults = data["SvyResults"]
	Reliabilitys = data["Reliabilitys"]
	SampleLayout_AIIDs = data["SampleLayout_AIIDs"]
	SampleLayout_ARWIDs = data["SampleLayout_ARWIDs"]
	Photo_AIIDs = data["Photo_AIIDs"]
	Photo_ARWIDs = data["Photo_ARWIDs"]
	PhotoDesc_ARWIDs = data["PhotoDesc_ARWIDs"]
	CommentInfos = data["CommentInfos"]
	res = mysql_api_seismological_bureau.add_B7_VolcanicDataTable(sid, IDs, ProjectIDs, SamplePointIDs, FieldIDs, ElementTypes, Names, SvyResults, Reliabilitys, SampleLayout_AIIDs, SampleLayout_ARWIDs, Photo_AIIDs, Photo_ARWIDs, PhotoDesc_ARWIDs, CommentInfos)
	return json.dumps(res, ensure_ascii=False)

@app.route('/mysql/seismological_bureau/add_B7_VolcanicSvyProjectTable/', methods = ['POST'])
def add_B7_VolcanicSvyProjectTable():
	data = json.loads(request.get_data())
	sid = data["sid"]
	IDs = data["IDs"]
	MainAFMRegionIDs = data["MainAFMRegionIDs"]
	TargetRegionIDs = data["TargetRegionIDs"]
	WorkRegionIDs = data["WorkRegionIDs"]
	Names = data["Names"]
	DeliverPersons = data["DeliverPersons"]
	DeliverInstitutes = data["DeliverInstitutes"]
	ReportDates = data["ReportDates"]
	TestApparatuss = data["TestApparatuss"]
	CollectedSampleCounts = data["CollectedSampleCounts"]
	SampleCounts = data["SampleCounts"]
	MeasuringResultCounts = data["MeasuringResultCounts"]
	DeliverReport_ARIDs = data["DeliverReport_ARIDs"]
	DeliverReport_ARWIDs = data["DeliverReport_ARWIDs"]
	TestReport_ARIDs = data["TestReport_ARIDs"]
	TestReport_ARWIDs = data["TestReport_ARWIDs"]
	Surveyors = data["Surveyors"]
	TestInstitutes = data["TestInstitutes"]
	ResultReport_ARIDs = data["ResultReport_ARIDs"]
	ResultReport_ARWIDs = data["ResultReport_ARWIDs"]
	CommentInfos = data["CommentInfos"]
	res = mysql_api_seismological_bureau.add_B7_VolcanicSvyProjectTable(sid, IDs, MainAFMRegionIDs, TargetRegionIDs, WorkRegionIDs, Names, DeliverPersons, DeliverInstitutes, ReportDates, TestApparatuss, CollectedSampleCounts, SampleCounts, MeasuringResultCounts, DeliverReport_ARIDs, DeliverReport_ARWIDs, TestReport_ARIDs, TestReport_ARWIDs, Surveyors, TestInstitutes, ResultReport_ARIDs, ResultReport_ARWIDs, CommentInfos)
	return json.dumps(res, ensure_ascii=False)

@app.route('/mysql/seismological_bureau/add_B7_VolSvyPtObservationObject/', methods = ['POST'])
def add_B7_VolSvyPtObservationObject():
	data = json.loads(request.get_data())
	sid = data["sid"]
	IDs = data["IDs"]
	VolcanicSvyPtIDs = data["VolcanicSvyPtIDs"]
	CraterIDs = data["CraterIDs"]
	LavaIDs = data["LavaIDs"]
	VolcanicConeIDs = data["VolcanicConeIDs"]
	res = mysql_api_seismological_bureau.add_B7_VolSvyPtObservationObject(sid, IDs, VolcanicSvyPtIDs, CraterIDs, LavaIDs, VolcanicConeIDs)
	return json.dumps(res, ensure_ascii=False)

@app.route('/mysql/seismological_bureau/add_Crater/', methods = ['POST'])
def add_Crater():
	data = json.loads(request.get_data())
	sid = data["sid"]
	points = data["points"]
	IDs = data["IDs"]
	ConeNames = data["ConeNames"]
	ConeTypes = data["ConeTypes"]
	ConeMorphologys = data["ConeMorphologys"]
	ConeHeights = data["ConeHeights"]
	CraterDepths = data["CraterDepths"]
	InsideSlopeAngles = data["InsideSlopeAngles"]
	OutsideSlopeAngles = data["OutsideSlopeAngles"]
	BottomDiameters = data["BottomDiameters"]
	CraterWallsDiameters = data["CraterWallsDiameters"]
	CraterDiameters = data["CraterDiameters"]
	OverfallDirections = data["OverfallDirections"]
	DepositTypes = data["DepositTypes"]
	DepositThicknesss = data["DepositThicknesss"]
	DepositGranularitys = data["DepositGranularitys"]
	LavaDribletSizes = data["LavaDribletSizes"]
	ConeStructureProfile_AIIDs = data["ConeStructureProfile_AIIDs"]
	ConeStructureProfile_ARWIDs = data["ConeStructureProfile_ARWIDs"]
	RockInclusionTypes = data["RockInclusionTypes"]
	RockInclusionNums = data["RockInclusionNums"]
	RockInclusionGranularitys = data["RockInclusionGranularitys"]
	RockInclusionShapes = data["RockInclusionShapes"]
	RockInclusionOutputStates = data["RockInclusionOutputStates"]
	Sketch_AIIDs = data["Sketch_AIIDs"]
	Sketch_ARWIDs = data["Sketch_ARWIDs"]
	Photo_AIIDs = data["Photo_AIIDs"]
	Photo_ARWIDs = data["Photo_ARWIDs"]
	PhotoDesc_ARWIDs = data["PhotoDesc_ARWIDs"]
	Photographers = data["Photographers"]
	CommentInfos = data["CommentInfos"]
	res = mysql_api_seismological_bureau.add_Crater(sid, points, IDs, ConeNames, ConeTypes, ConeMorphologys, ConeHeights, CraterDepths, InsideSlopeAngles, OutsideSlopeAngles, BottomDiameters, CraterWallsDiameters, CraterDiameters, OverfallDirections, DepositTypes, DepositThicknesss, DepositGranularitys, LavaDribletSizes, ConeStructureProfile_AIIDs, ConeStructureProfile_ARWIDs, RockInclusionTypes, RockInclusionNums, RockInclusionGranularitys, RockInclusionShapes, RockInclusionOutputStates, Sketch_AIIDs, Sketch_ARWIDs, Photo_AIIDs, Photo_ARWIDs, PhotoDesc_ARWIDs, Photographers, CommentInfos)
	return json.dumps(res, ensure_ascii=False)

@app.route('/mysql/seismological_bureau/add_Lava/', methods = ['POST'])
def add_Lava():
	data = json.loads(request.get_data())
	sid = data["sid"]
	faces = data["faces"]
	IDs = data["IDs"]
	Names = data["Names"]
	Types = data["Types"]
	Scopes = data["Scopes"]
	SurfaceMorphologys = data["SurfaceMorphologys"]
	StructureZones = data["StructureZones"]
	Units = data["Units"]
	Ages = data["Ages"]
	Descriptions = data["Descriptions"]
	RockTypes = data["RockTypes"]
	RockNames = data["RockNames"]
	RockDescriptions = data["RockDescriptions"]
	Sketch_AIIDs = data["Sketch_AIIDs"]
	Sketch_ARWIDs = data["Sketch_ARWIDs"]
	Photo_AIIDs = data["Photo_AIIDs"]
	Photo_ARWIDs = data["Photo_ARWIDs"]
	PhotoDesc_ARWIDs = data["PhotoDesc_ARWIDs"]
	Photographers = data["Photographers"]
	CommentInfos = data["CommentInfos"]
	res = mysql_api_seismological_bureau.add_Lava(sid, faces, IDs, Names, Types, Scopes, SurfaceMorphologys, StructureZones, Units, Ages, Descriptions, RockTypes, RockNames, RockDescriptions, Sketch_AIIDs, Sketch_ARWIDs, Photo_AIIDs, Photo_ARWIDs, PhotoDesc_ARWIDs, Photographers, CommentInfos)
	return json.dumps(res, ensure_ascii=False)

@app.route('/mysql/seismological_bureau/add_VolcanicCone/', methods = ['POST'])
def add_VolcanicCone():
	data = json.loads(request.get_data())
	sid = data["sid"]
	faces = data["faces"]
	IDs = data["IDs"]
	ConeNames = data["ConeNames"]
	ConeTypes = data["ConeTypes"]
	ConeMorphologys = data["ConeMorphologys"]
	ConeHeights = data["ConeHeights"]
	CraterDepths = data["CraterDepths"]
	InsideSlopeAngles = data["InsideSlopeAngles"]
	OutsideSlopeAngles = data["OutsideSlopeAngles"]
	BottomDiameters = data["BottomDiameters"]
	CraterWallsDiameters = data["CraterWallsDiameters"]
	CraterDiameters = data["CraterDiameters"]
	OverfallDirections = data["OverfallDirections"]
	DepositTypes = data["DepositTypes"]
	DepositThicknesss = data["DepositThicknesss"]
	DepositGranularitys = data["DepositGranularitys"]
	LavaDribletSizes = data["LavaDribletSizes"]
	ConeStructureProfile_AIIDs = data["ConeStructureProfile_AIIDs"]
	ConeStructureProfile_ARWIDs = data["ConeStructureProfile_ARWIDs"]
	RockInclusionTypes = data["RockInclusionTypes"]
	RockInclusionNums = data["RockInclusionNums"]
	RockInclusionGranularitys = data["RockInclusionGranularitys"]
	RockInclusionShapes = data["RockInclusionShapes"]
	RockInclusionOutputStates = data["RockInclusionOutputStates"]
	Sketch_AIIDs = data["Sketch_AIIDs"]
	Sketch_ARWIDs = data["Sketch_ARWIDs"]
	Photo_AIIDs = data["Photo_AIIDs"]
	Photo_ARWIDs = data["Photo_ARWIDs"]
	PhotoDesc_ARWIDs = data["PhotoDesc_ARWIDs"]
	Photographers = data["Photographers"]
	CommentInfos = data["CommentInfos"]
	res = mysql_api_seismological_bureau.add_VolcanicCone(sid, faces, IDs, ConeNames, ConeTypes, ConeMorphologys, ConeHeights, CraterDepths, InsideSlopeAngles, OutsideSlopeAngles, BottomDiameters, CraterWallsDiameters, CraterDiameters, OverfallDirections, DepositTypes, DepositThicknesss, DepositGranularitys, LavaDribletSizes, ConeStructureProfile_AIIDs, ConeStructureProfile_ARWIDs, RockInclusionTypes, RockInclusionNums, RockInclusionGranularitys, RockInclusionShapes, RockInclusionOutputStates, Sketch_AIIDs, Sketch_ARWIDs, Photo_AIIDs, Photo_ARWIDs, PhotoDesc_ARWIDs, Photographers, CommentInfos)
	return json.dumps(res, ensure_ascii=False)

@app.route('/mysql/seismological_bureau/add_VolcanicSvyPoint/', methods = ['POST'])
def add_VolcanicSvyPoint():
	data = json.loads(request.get_data())
	sid = data["sid"]
	points = data["points"]
	IDs = data["IDs"]
	ProjectIDs = data["ProjectIDs"]
	FieldIDs = data["FieldIDs"]
	LocationNames = data["LocationNames"]
	SvyDates = data["SvyDates"]
	Purposes = data["Purposes"]
	SPCommentInfos = data["SPCommentInfos"]
	Lons = data["Lons"]
	Lats = data["Lats"]
	Elevations = data["Elevations"]
	SvyMethodss = data["SvyMethodss"]
	CollectedSampleCounts = data["CollectedSampleCounts"]
	SampleCounts = data["SampleCounts"]
	DatingSampleCounts = data["DatingSampleCounts"]
	IsVocanicCones = data["IsVocanicCones"]
	IsLavas = data["IsLavas"]
	IsCraters = data["IsCraters"]
	Photo_AIIDs = data["Photo_AIIDs"]
	Photo_ARWIDs = data["Photo_ARWIDs"]
	PhotoDesc_ARWIDs = data["PhotoDesc_ARWIDs"]
	Photographers = data["Photographers"]
	TypicalProfile_ACIDs = data["TypicalProfile_ACIDs"]
	TypicalProfile_ARWIDs = data["TypicalProfile_ARWIDs"]
	IsInMaps = data["IsInMaps"]
	CommentInfos = data["CommentInfos"]
	res = mysql_api_seismological_bureau.add_VolcanicSvyPoint(sid, points, IDs, ProjectIDs, FieldIDs, LocationNames, SvyDates, Purposes, SPCommentInfos, Lons, Lats, Elevations, SvyMethodss, CollectedSampleCounts, SampleCounts, DatingSampleCounts, IsVocanicCones, IsLavas, IsCraters, Photo_AIIDs, Photo_ARWIDs, PhotoDesc_ARWIDs, Photographers, TypicalProfile_ACIDs, TypicalProfile_ARWIDs, IsInMaps, CommentInfos)
	return json.dumps(res, ensure_ascii=False)

