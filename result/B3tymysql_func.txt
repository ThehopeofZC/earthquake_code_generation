bool EsAddB3_DrillProjectTableToNetDB(const int nSId, const vector<_B3_DRILLPROJECTTABLE>& vec_B3_DrillProjectTable)
{
if(vec_B3_DrillProjectTable.empty())
{
return false;
}
Py_Initialize();
if (!Py_IsInitialized())
{
return false;
}
PyRun_SimpleString("import sys");
PyRun_SimpleString("sys.path.append('./')");
PyObject* pModule = NULL;
PyObject* pFunc = NULL;
pModule = PyImport_ImportModule(module_name);
if (pModule == NULL)
{
return false;
}
int nRecordNum = int(vec_B3_DrillProjectTable.size());
pFunc = PyObject_GetAttrString(pModule, func_add_B3_DrillProjectTable);
if(pFunc == NULL)
{
return false;
}
PyObject* args = PyTuple_New(21);
PyObject* pyTupleURL = PyTuple_New(1);
PyObject* pyTupleSID = PyTuple_New(1);
PyObject* pyTupleIDs = PyTuple_New(nRecordNum);
PyObject* pyTupleMainAFMRegionIDs = PyTuple_New(nRecordNum);
PyObject* pyTupleTargetRegionIDs = PyTuple_New(nRecordNum);
PyObject* pyTupleWorkRegionIDs = PyTuple_New(nRecordNum);
PyObject* pyTupleNames = PyTuple_New(nRecordNum);
PyObject* pyTupleDrillCounts = PyTuple_New(nRecordNum);
PyObject* pyTupleDrillLengths = PyTuple_New(nRecordNum);
PyObject* pyTupleGeophyWellNums = PyTuple_New(nRecordNum);
PyObject* pyTupleCollectedSampleCounts = PyTuple_New(nRecordNum);
PyObject* pyTupleSampleCounts = PyTuple_New(nRecordNum);
PyObject* pyTupleDatingSampleCounts = PyTuple_New(nRecordNum);
PyObject* pyTupleDrillInstitutes = PyTuple_New(nRecordNum);
PyObject* pyTupleDB_ARIDs = PyTuple_New(nRecordNum);
PyObject* pyTupleDB_ARWIDs = PyTuple_New(nRecordNum);
PyObject* pyTupleCS_ARIDs = PyTuple_New(nRecordNum);
PyObject* pyTupleCS_ARWIDs = PyTuple_New(nRecordNum);
PyObject* pyTupleReport_ARIDs = PyTuple_New(nRecordNum);
PyObject* pyTupleReport_ARWIDs = PyTuple_New(nRecordNum);
PyObject* pyTupleCommentInfos = PyTuple_New(nRecordNum);
PyTuple_SetItem(pyTupleURL, 0, StringToPy(url_add_B3_DrillProjectTable));
PyTuple_SetItem(pyTupleSID, 0, Py_BuildValue("i", nSId));
for (int idx = 0; idx < nRecordNum; idx++)
{
PyTuple_SetItem(pyTupleIDs, idx, StringToPy(WstringToString(vec_B3_DrillProjectTable[idx]._baseinfo._ID)));
PyTuple_SetItem(pyTupleMainAFMRegionIDs, idx, StringToPy(WstringToString(vec_B3_DrillProjectTable[idx]._MainAFMRegionID)));
PyTuple_SetItem(pyTupleTargetRegionIDs, idx, StringToPy(WstringToString(vec_B3_DrillProjectTable[idx]._TargetRegionID)));
PyTuple_SetItem(pyTupleWorkRegionIDs, idx, StringToPy(WstringToString(vec_B3_DrillProjectTable[idx]._WorkRegionID)));
PyTuple_SetItem(pyTupleNames, idx, StringToPy(WstringToString(vec_B3_DrillProjectTable[idx]._Name)));
PyTuple_SetItem(pyTupleDrillCounts, idx, Py_BuildValue("i", vec_B3_DrillProjectTable[idx]._DrillCount));
PyTuple_SetItem(pyTupleDrillLengths, idx, PyFloat_FromDouble(vec_B3_DrillProjectTable[idx]._DrillLength));
PyTuple_SetItem(pyTupleGeophyWellNums, idx, Py_BuildValue("i", vec_B3_DrillProjectTable[idx]._GeophyWellNum));
PyTuple_SetItem(pyTupleCollectedSampleCounts, idx, Py_BuildValue("i", vec_B3_DrillProjectTable[idx]._CollectedSampleCount));
PyTuple_SetItem(pyTupleSampleCounts, idx, Py_BuildValue("i", vec_B3_DrillProjectTable[idx]._SampleCount));
PyTuple_SetItem(pyTupleDatingSampleCounts, idx, Py_BuildValue("i", vec_B3_DrillProjectTable[idx]._DatingSampleCount));
PyTuple_SetItem(pyTupleDrillInstitutes, idx, StringToPy(WstringToString(vec_B3_DrillProjectTable[idx]._DrillInstitute)));
PyTuple_SetItem(pyTupleDB_ARIDs, idx, StringToPy(WstringToString(vec_B3_DrillProjectTable[idx]._DB_ARID)));
PyTuple_SetItem(pyTupleDB_ARWIDs, idx, StringToPy(WstringToString(vec_B3_DrillProjectTable[idx]._DB_ARWID)));
PyTuple_SetItem(pyTupleCS_ARIDs, idx, StringToPy(WstringToString(vec_B3_DrillProjectTable[idx]._CS_ARID)));
PyTuple_SetItem(pyTupleCS_ARWIDs, idx, StringToPy(WstringToString(vec_B3_DrillProjectTable[idx]._CS_ARWID)));
PyTuple_SetItem(pyTupleReport_ARIDs, idx, StringToPy(WstringToString(vec_B3_DrillProjectTable[idx]._Report_ARID)));
PyTuple_SetItem(pyTupleReport_ARWIDs, idx, StringToPy(WstringToString(vec_B3_DrillProjectTable[idx]._Report_ARWID)));
PyTuple_SetItem(pyTupleCommentInfos, idx, StringToPy(WstringToString(vec_B3_DrillProjectTable[idx]._baseinfo._CommentInfo)));
}
PyTuple_SetItem(args, 0, pyTupleURL);
PyTuple_SetItem(args, 1, pyTupleSID);
PyTuple_SetItem(args, 2, pyTupleIDs);
PyTuple_SetItem(args, 3, pyTupleMainAFMRegionIDs);
PyTuple_SetItem(args, 4, pyTupleTargetRegionIDs);
PyTuple_SetItem(args, 5, pyTupleWorkRegionIDs);
PyTuple_SetItem(args, 6, pyTupleNames);
PyTuple_SetItem(args, 7, pyTupleDrillCounts);
PyTuple_SetItem(args, 8, pyTupleDrillLengths);
PyTuple_SetItem(args, 9, pyTupleGeophyWellNums);
PyTuple_SetItem(args, 10, pyTupleCollectedSampleCounts);
PyTuple_SetItem(args, 11, pyTupleSampleCounts);
PyTuple_SetItem(args, 12, pyTupleDatingSampleCounts);
PyTuple_SetItem(args, 13, pyTupleDrillInstitutes);
PyTuple_SetItem(args, 14, pyTupleDB_ARIDs);
PyTuple_SetItem(args, 15, pyTupleDB_ARWIDs);
PyTuple_SetItem(args, 16, pyTupleCS_ARIDs);
PyTuple_SetItem(args, 17, pyTupleCS_ARWIDs);
PyTuple_SetItem(args, 18, pyTupleReport_ARIDs);
PyTuple_SetItem(args, 19, pyTupleReport_ARWIDs);
PyTuple_SetItem(args, 20, pyTupleCommentInfos);
PyObject* pRet = PyEval_CallObject(pFunc, args);
const char* szRet = pRet->ob_type->tp_name;
if(*szRet == *err_URLError || *szRet == *err_HTTPError)
return false;
Py_Finalize();
return true;
}

bool EsAddDrillFaultPointToNetDB(const int nSId, const vector<_DRILLFAULTPOINT>& vec_DrillFaultPoint)
{
if(vec_DrillFaultPoint.empty())
{
return false;
}
Py_Initialize();
if (!Py_IsInitialized())
{
return false;
}
PyRun_SimpleString("import sys");
PyRun_SimpleString("sys.path.append('./')");
PyObject* pModule = NULL;
PyObject* pFunc = NULL;
pModule = PyImport_ImportModule(module_name);
if (pModule == NULL)
{
return false;
}
int nRecordNum = int(vec_DrillFaultPoint.size());
pFunc = PyObject_GetAttrString(pModule, func_add_DrillFaultPoint);
if(pFunc == NULL)
{
return false;
}
PyObject* args = PyTuple_New(16);
PyObject* pyTupleURL = PyTuple_New(1);
PyObject* pyTupleSID = PyTuple_New(1);
PyObject* pyTuplePoints = PyTuple_New(nRecordNum);
PyObject* pyTupleIDs = PyTuple_New(nRecordNum);
PyObject* pyTupleDrillProfileIDs = PyTuple_New(nRecordNum);
PyObject* pyTupleFieldIDs = PyTuple_New(nRecordNum);
PyObject* pyTupleSvyMethods = PyTuple_New(nRecordNum);
PyObject* pyTupleTopDepths = PyTuple_New(nRecordNum);
PyObject* pyTupleTopAges = PyTuple_New(nRecordNum);
PyObject* pyTupleLastAges = PyTuple_New(nRecordNum);
PyObject* pyTupleLastInterfaceDisplaces = PyTuple_New(nRecordNum);
PyObject* pyTupleViewDirections = PyTuple_New(nRecordNum);
PyObject* pyTupleViewClinations = PyTuple_New(nRecordNum);
PyObject* pyTupleFaultTypes = PyTuple_New(nRecordNum);
PyObject* pyTupleFaultPointDescriptions = PyTuple_New(nRecordNum);
PyObject* pyTupleCommentInfos = PyTuple_New(nRecordNum);
PyTuple_SetItem(pyTupleURL, 0, StringToPy(url_add_DrillFaultPoint));
PyTuple_SetItem(pyTupleSID, 0, Py_BuildValue("i", nSId));
for (int idx = 0; idx < nRecordNum; idx++)
{
PyObject* pyTuplePoint = PyTuple_New(3);
PyTuple_SetItem(pyTuplePoint, 0, PyFloat_FromDouble(vec_DrillFaultPoint[idx]._baseinfo._point._x));
PyTuple_SetItem(pyTuplePoint, 1, PyFloat_FromDouble(vec_DrillFaultPoint[idx]._baseinfo._point._y));
PyTuple_SetItem(pyTuplePoint, 2, PyFloat_FromDouble(vec_DrillFaultPoint[idx]._baseinfo._point._z));
PyTuple_SetItem(pyTuplePoints, idx, pyTuplePoint);
PyTuple_SetItem(pyTupleIDs, idx, StringToPy(WstringToString(vec_DrillFaultPoint[idx]._baseinfo._ID)));
PyTuple_SetItem(pyTupleDrillProfileIDs, idx, StringToPy(WstringToString(vec_DrillFaultPoint[idx]._DrillProfileID)));
PyTuple_SetItem(pyTupleFieldIDs, idx, StringToPy(WstringToString(vec_DrillFaultPoint[idx]._FieldID)));
PyTuple_SetItem(pyTupleSvyMethods, idx, StringToPy(WstringToString(vec_DrillFaultPoint[idx]._SvyMethod)));
PyTuple_SetItem(pyTupleTopDepths, idx, StringToPy(WstringToString(vec_DrillFaultPoint[idx]._TopDepth)));
PyTuple_SetItem(pyTupleTopAges, idx, StringToPy(WstringToString(vec_DrillFaultPoint[idx]._TopAge)));
PyTuple_SetItem(pyTupleLastAges, idx, StringToPy(WstringToString(vec_DrillFaultPoint[idx]._LastAge)));
PyTuple_SetItem(pyTupleLastInterfaceDisplaces, idx, PyFloat_FromDouble(vec_DrillFaultPoint[idx]._LastInterfaceDisplace));
PyTuple_SetItem(pyTupleViewDirections, idx, Py_BuildValue("i", vec_DrillFaultPoint[idx]._ViewDirection));
PyTuple_SetItem(pyTupleViewClinations, idx, Py_BuildValue("i", vec_DrillFaultPoint[idx]._ViewClination));
PyTuple_SetItem(pyTupleFaultTypes, idx, Py_BuildValue("i", vec_DrillFaultPoint[idx]._FaultType));
PyTuple_SetItem(pyTupleFaultPointDescriptions, idx, StringToPy(WstringToString(vec_DrillFaultPoint[idx]._FaultPointDescription)));
PyTuple_SetItem(pyTupleCommentInfos, idx, StringToPy(WstringToString(vec_DrillFaultPoint[idx]._baseinfo._CommentInfo)));
}
PyTuple_SetItem(args, 0, pyTupleURL);
PyTuple_SetItem(args, 1, pyTupleSID);
PyTuple_SetItem(args, 2, pyTuplePoints);
PyTuple_SetItem(args, 3, pyTupleIDs);
PyTuple_SetItem(args, 4, pyTupleDrillProfileIDs);
PyTuple_SetItem(args, 5, pyTupleFieldIDs);
PyTuple_SetItem(args, 6, pyTupleSvyMethods);
PyTuple_SetItem(args, 7, pyTupleTopDepths);
PyTuple_SetItem(args, 8, pyTupleTopAges);
PyTuple_SetItem(args, 9, pyTupleLastAges);
PyTuple_SetItem(args, 10, pyTupleLastInterfaceDisplaces);
PyTuple_SetItem(args, 11, pyTupleViewDirections);
PyTuple_SetItem(args, 12, pyTupleViewClinations);
PyTuple_SetItem(args, 13, pyTupleFaultTypes);
PyTuple_SetItem(args, 14, pyTupleFaultPointDescriptions);
PyTuple_SetItem(args, 15, pyTupleCommentInfos);
PyObject* pRet = PyEval_CallObject(pFunc, args);
const char* szRet = pRet->ob_type->tp_name;
if(*szRet == *err_URLError || *szRet == *err_HTTPError)
return false;
Py_Finalize();
return true;
}

bool EsAddDrillHoleToNetDB(const int nSId, const vector<_DRILLHOLE>& vec_DrillHole)
{
if(vec_DrillHole.empty())
{
return false;
}
Py_Initialize();
if (!Py_IsInitialized())
{
return false;
}
PyRun_SimpleString("import sys");
PyRun_SimpleString("sys.path.append('./')");
PyObject* pModule = NULL;
PyObject* pFunc = NULL;
pModule = PyImport_ImportModule(module_name);
if (pModule == NULL)
{
return false;
}
int nRecordNum = int(vec_DrillHole.size());
pFunc = PyObject_GetAttrString(pModule, func_add_DrillHole);
if(pFunc == NULL)
{
return false;
}
PyObject* args = PyTuple_New(50);
PyObject* pyTupleURL = PyTuple_New(1);
PyObject* pyTupleSID = PyTuple_New(1);
PyObject* pyTuplePoints = PyTuple_New(nRecordNum);
PyObject* pyTupleIDs = PyTuple_New(nRecordNum);
PyObject* pyTupleProjectIDs = PyTuple_New(nRecordNum);
PyObject* pyTupleProfileIDs = PyTuple_New(nRecordNum);
PyObject* pyTupleFieldIDs = PyTuple_New(nRecordNum);
PyObject* pyTuplePurposes = PyTuple_New(nRecordNum);
PyObject* pyTupleDrillDates = PyTuple_New(nRecordNum);
PyObject* pyTupleLocationNames = PyTuple_New(nRecordNum);
PyObject* pyTupleDrillSources = PyTuple_New(nRecordNum);
PyObject* pyTupleLons = PyTuple_New(nRecordNum);
PyObject* pyTupleLats = PyTuple_New(nRecordNum);
PyObject* pyTupleElevations = PyTuple_New(nRecordNum);
PyObject* pyTupleDepths = PyTuple_New(nRecordNum);
PyObject* pyTupleCoreTotalThicknesss = PyTuple_New(nRecordNum);
PyObject* pyTupleSurSoilNoCountedThicknesss = PyTuple_New(nRecordNum);
PyObject* pyTupleHoloceneThicknesss = PyTuple_New(nRecordNum);
PyObject* pyTupleUpPleiThicknesss = PyTuple_New(nRecordNum);
PyObject* pyTupleMidPleiThicknesss = PyTuple_New(nRecordNum);
PyObject* pyTupleLowPleiThicknesss = PyTuple_New(nRecordNum);
PyObject* pyTuplePrePleiThicknesss = PyTuple_New(nRecordNum);
PyObject* pyTupleCollectedSampleCounts = PyTuple_New(nRecordNum);
PyObject* pyTupleSampleCounts = PyTuple_New(nRecordNum);
PyObject* pyTupleDatingSampleCounts = PyTuple_New(nRecordNum);
PyObject* pyTupleIsGeophyWells = PyTuple_New(nRecordNum);
PyObject* pyTupleCollectedEnviromentSampleCounts = PyTuple_New(nRecordNum);
PyObject* pyTupleEnviromentSampleCounts = PyTuple_New(nRecordNum);
PyObject* pyTupleTestedEnviromentSampleCounts = PyTuple_New(nRecordNum);
PyObject* pyTupleColumnChart_AIIDs = PyTuple_New(nRecordNum);
PyObject* pyTupleColumnChart_ARWIDs = PyTuple_New(nRecordNum);
PyObject* pyTupleCorePhoto_AIIDs = PyTuple_New(nRecordNum);
PyObject* pyTupleCorePhoto_ARWIDs = PyTuple_New(nRecordNum);
PyObject* pyTupleDrillingLog_ARIDs = PyTuple_New(nRecordNum);
PyObject* pyTupleDrillingLog_ARWIDs = PyTuple_New(nRecordNum);
PyObject* pyTupleHydroRecord_AIIDs = PyTuple_New(nRecordNum);
PyObject* pyTupleHydroRecord_ARWIDs = PyTuple_New(nRecordNum);
PyObject* pyTupleGeologySmplRec_AIIDs = PyTuple_New(nRecordNum);
PyObject* pyTupleGeologySmplRec_ARWIDs = PyTuple_New(nRecordNum);
PyObject* pyTupleDepthCheck_AIIDs = PyTuple_New(nRecordNum);
PyObject* pyTupleDepthCheck_ARWIDs = PyTuple_New(nRecordNum);
PyObject* pyTupleWellClination_AIIDs = PyTuple_New(nRecordNum);
PyObject* pyTupleWellClination_ARWIDs = PyTuple_New(nRecordNum);
PyObject* pyTupleCoreCatalog_AIIDs = PyTuple_New(nRecordNum);
PyObject* pyTupleCoreCatalog_ARWIDs = PyTuple_New(nRecordNum);
PyObject* pyTupleSealDesignReport_ARIDs = PyTuple_New(nRecordNum);
PyObject* pyTupleSealDesignReport_ARWIDs = PyTuple_New(nRecordNum);
PyObject* pyTupleSealCheck_ARIDs = PyTuple_New(nRecordNum);
PyObject* pyTupleSealCheck_ARWIDs = PyTuple_New(nRecordNum);
PyObject* pyTupleCommentInfos = PyTuple_New(nRecordNum);
PyTuple_SetItem(pyTupleURL, 0, StringToPy(url_add_DrillHole));
PyTuple_SetItem(pyTupleSID, 0, Py_BuildValue("i", nSId));
for (int idx = 0; idx < nRecordNum; idx++)
{
PyObject* pyTuplePoint = PyTuple_New(3);
PyTuple_SetItem(pyTuplePoint, 0, PyFloat_FromDouble(vec_DrillHole[idx]._baseinfo._point._x));
PyTuple_SetItem(pyTuplePoint, 1, PyFloat_FromDouble(vec_DrillHole[idx]._baseinfo._point._y));
PyTuple_SetItem(pyTuplePoint, 2, PyFloat_FromDouble(vec_DrillHole[idx]._baseinfo._point._z));
PyTuple_SetItem(pyTuplePoints, idx, pyTuplePoint);
PyTuple_SetItem(pyTupleIDs, idx, StringToPy(WstringToString(vec_DrillHole[idx]._baseinfo._ID)));
PyTuple_SetItem(pyTupleProjectIDs, idx, StringToPy(WstringToString(vec_DrillHole[idx]._ProjectID)));
PyTuple_SetItem(pyTupleProfileIDs, idx, StringToPy(WstringToString(vec_DrillHole[idx]._ProfileID)));
PyTuple_SetItem(pyTupleFieldIDs, idx, StringToPy(WstringToString(vec_DrillHole[idx]._FieldID)));
PyTuple_SetItem(pyTuplePurposes, idx, StringToPy(WstringToString(vec_DrillHole[idx]._Purpose)));
PyTuple_SetItem(pyTupleDrillDates, idx, StringToPy(WstringToString(vec_DrillHole[idx]._DrillDate)));
PyTuple_SetItem(pyTupleLocationNames, idx, StringToPy(WstringToString(vec_DrillHole[idx]._LocationName)));
PyTuple_SetItem(pyTupleDrillSources, idx, Py_BuildValue("i", vec_DrillHole[idx]._DrillSource));
PyTuple_SetItem(pyTupleLons, idx, PyFloat_FromDouble(vec_DrillHole[idx]._Lon));
PyTuple_SetItem(pyTupleLats, idx, PyFloat_FromDouble(vec_DrillHole[idx]._Lat));
PyTuple_SetItem(pyTupleElevations, idx, PyFloat_FromDouble(vec_DrillHole[idx]._Elevation));
PyTuple_SetItem(pyTupleDepths, idx, PyFloat_FromDouble(vec_DrillHole[idx]._Depth));
PyTuple_SetItem(pyTupleCoreTotalThicknesss, idx, PyFloat_FromDouble(vec_DrillHole[idx]._CoreTotalThickness));
PyTuple_SetItem(pyTupleSurSoilNoCountedThicknesss, idx, PyFloat_FromDouble(vec_DrillHole[idx]._SurSoilNoCountedThickness));
PyTuple_SetItem(pyTupleHoloceneThicknesss, idx, PyFloat_FromDouble(vec_DrillHole[idx]._HoloceneThickness));
PyTuple_SetItem(pyTupleUpPleiThicknesss, idx, PyFloat_FromDouble(vec_DrillHole[idx]._UpPleiThickness));
PyTuple_SetItem(pyTupleMidPleiThicknesss, idx, PyFloat_FromDouble(vec_DrillHole[idx]._MidPleiThickness));
PyTuple_SetItem(pyTupleLowPleiThicknesss, idx, PyFloat_FromDouble(vec_DrillHole[idx]._LowPleiThickness));
PyTuple_SetItem(pyTuplePrePleiThicknesss, idx, PyFloat_FromDouble(vec_DrillHole[idx]._PrePleiThickness));
PyTuple_SetItem(pyTupleCollectedSampleCounts, idx, Py_BuildValue("i", vec_DrillHole[idx]._CollectedSampleCount));
PyTuple_SetItem(pyTupleSampleCounts, idx, Py_BuildValue("i", vec_DrillHole[idx]._SampleCount));
PyTuple_SetItem(pyTupleDatingSampleCounts, idx, Py_BuildValue("i", vec_DrillHole[idx]._DatingSampleCount));
PyTuple_SetItem(pyTupleIsGeophyWells, idx, Py_BuildValue("i", vec_DrillHole[idx]._IsGeophyWell));
PyTuple_SetItem(pyTupleCollectedEnviromentSampleCounts, idx, Py_BuildValue("i", vec_DrillHole[idx]._CollectedEnviromentSampleCount));
PyTuple_SetItem(pyTupleEnviromentSampleCounts, idx, Py_BuildValue("i", vec_DrillHole[idx]._EnviromentSampleCount));
PyTuple_SetItem(pyTupleTestedEnviromentSampleCounts, idx, Py_BuildValue("i", vec_DrillHole[idx]._TestedEnviromentSampleCount));
PyTuple_SetItem(pyTupleColumnChart_AIIDs, idx, StringToPy(WstringToString(vec_DrillHole[idx]._ColumnChart_AIID)));
PyTuple_SetItem(pyTupleColumnChart_ARWIDs, idx, StringToPy(WstringToString(vec_DrillHole[idx]._ColumnChart_ARWID)));
PyTuple_SetItem(pyTupleCorePhoto_AIIDs, idx, StringToPy(WstringToString(vec_DrillHole[idx]._CorePhoto_AIID)));
PyTuple_SetItem(pyTupleCorePhoto_ARWIDs, idx, StringToPy(WstringToString(vec_DrillHole[idx]._CorePhoto_ARWID)));
PyTuple_SetItem(pyTupleDrillingLog_ARIDs, idx, StringToPy(WstringToString(vec_DrillHole[idx]._DrillingLog_ARID)));
PyTuple_SetItem(pyTupleDrillingLog_ARWIDs, idx, StringToPy(WstringToString(vec_DrillHole[idx]._DrillingLog_ARWID)));
PyTuple_SetItem(pyTupleHydroRecord_AIIDs, idx, StringToPy(WstringToString(vec_DrillHole[idx]._HydroRecord_AIID)));
PyTuple_SetItem(pyTupleHydroRecord_ARWIDs, idx, StringToPy(WstringToString(vec_DrillHole[idx]._HydroRecord_ARWID)));
PyTuple_SetItem(pyTupleGeologySmplRec_AIIDs, idx, StringToPy(WstringToString(vec_DrillHole[idx]._GeologySmplRec_AIID)));
PyTuple_SetItem(pyTupleGeologySmplRec_ARWIDs, idx, StringToPy(WstringToString(vec_DrillHole[idx]._GeologySmplRec_ARWID)));
PyTuple_SetItem(pyTupleDepthCheck_AIIDs, idx, StringToPy(WstringToString(vec_DrillHole[idx]._DepthCheck_AIID)));
PyTuple_SetItem(pyTupleDepthCheck_ARWIDs, idx, StringToPy(WstringToString(vec_DrillHole[idx]._DepthCheck_ARWID)));
PyTuple_SetItem(pyTupleWellClination_AIIDs, idx, StringToPy(WstringToString(vec_DrillHole[idx]._WellClination_AIID)));
PyTuple_SetItem(pyTupleWellClination_ARWIDs, idx, StringToPy(WstringToString(vec_DrillHole[idx]._WellClination_ARWID)));
PyTuple_SetItem(pyTupleCoreCatalog_AIIDs, idx, StringToPy(WstringToString(vec_DrillHole[idx]._CoreCatalog_AIID)));
PyTuple_SetItem(pyTupleCoreCatalog_ARWIDs, idx, StringToPy(WstringToString(vec_DrillHole[idx]._CoreCatalog_ARWID)));
PyTuple_SetItem(pyTupleSealDesignReport_ARIDs, idx, StringToPy(WstringToString(vec_DrillHole[idx]._SealDesignReport_ARID)));
PyTuple_SetItem(pyTupleSealDesignReport_ARWIDs, idx, StringToPy(WstringToString(vec_DrillHole[idx]._SealDesignReport_ARWID)));
PyTuple_SetItem(pyTupleSealCheck_ARIDs, idx, StringToPy(WstringToString(vec_DrillHole[idx]._SealCheck_ARID)));
PyTuple_SetItem(pyTupleSealCheck_ARWIDs, idx, StringToPy(WstringToString(vec_DrillHole[idx]._SealCheck_ARWID)));
PyTuple_SetItem(pyTupleCommentInfos, idx, StringToPy(WstringToString(vec_DrillHole[idx]._baseinfo._CommentInfo)));
}
PyTuple_SetItem(args, 0, pyTupleURL);
PyTuple_SetItem(args, 1, pyTupleSID);
PyTuple_SetItem(args, 2, pyTuplePoints);
PyTuple_SetItem(args, 3, pyTupleIDs);
PyTuple_SetItem(args, 4, pyTupleProjectIDs);
PyTuple_SetItem(args, 5, pyTupleProfileIDs);
PyTuple_SetItem(args, 6, pyTupleFieldIDs);
PyTuple_SetItem(args, 7, pyTuplePurposes);
PyTuple_SetItem(args, 8, pyTupleDrillDates);
PyTuple_SetItem(args, 9, pyTupleLocationNames);
PyTuple_SetItem(args, 10, pyTupleDrillSources);
PyTuple_SetItem(args, 11, pyTupleLons);
PyTuple_SetItem(args, 12, pyTupleLats);
PyTuple_SetItem(args, 13, pyTupleElevations);
PyTuple_SetItem(args, 14, pyTupleDepths);
PyTuple_SetItem(args, 15, pyTupleCoreTotalThicknesss);
PyTuple_SetItem(args, 16, pyTupleSurSoilNoCountedThicknesss);
PyTuple_SetItem(args, 17, pyTupleHoloceneThicknesss);
PyTuple_SetItem(args, 18, pyTupleUpPleiThicknesss);
PyTuple_SetItem(args, 19, pyTupleMidPleiThicknesss);
PyTuple_SetItem(args, 20, pyTupleLowPleiThicknesss);
PyTuple_SetItem(args, 21, pyTuplePrePleiThicknesss);
PyTuple_SetItem(args, 22, pyTupleCollectedSampleCounts);
PyTuple_SetItem(args, 23, pyTupleSampleCounts);
PyTuple_SetItem(args, 24, pyTupleDatingSampleCounts);
PyTuple_SetItem(args, 25, pyTupleIsGeophyWells);
PyTuple_SetItem(args, 26, pyTupleCollectedEnviromentSampleCounts);
PyTuple_SetItem(args, 27, pyTupleEnviromentSampleCounts);
PyTuple_SetItem(args, 28, pyTupleTestedEnviromentSampleCounts);
PyTuple_SetItem(args, 29, pyTupleColumnChart_AIIDs);
PyTuple_SetItem(args, 30, pyTupleColumnChart_ARWIDs);
PyTuple_SetItem(args, 31, pyTupleCorePhoto_AIIDs);
PyTuple_SetItem(args, 32, pyTupleCorePhoto_ARWIDs);
PyTuple_SetItem(args, 33, pyTupleDrillingLog_ARIDs);
PyTuple_SetItem(args, 34, pyTupleDrillingLog_ARWIDs);
PyTuple_SetItem(args, 35, pyTupleHydroRecord_AIIDs);
PyTuple_SetItem(args, 36, pyTupleHydroRecord_ARWIDs);
PyTuple_SetItem(args, 37, pyTupleGeologySmplRec_AIIDs);
PyTuple_SetItem(args, 38, pyTupleGeologySmplRec_ARWIDs);
PyTuple_SetItem(args, 39, pyTupleDepthCheck_AIIDs);
PyTuple_SetItem(args, 40, pyTupleDepthCheck_ARWIDs);
PyTuple_SetItem(args, 41, pyTupleWellClination_AIIDs);
PyTuple_SetItem(args, 42, pyTupleWellClination_ARWIDs);
PyTuple_SetItem(args, 43, pyTupleCoreCatalog_AIIDs);
PyTuple_SetItem(args, 44, pyTupleCoreCatalog_ARWIDs);
PyTuple_SetItem(args, 45, pyTupleSealDesignReport_ARIDs);
PyTuple_SetItem(args, 46, pyTupleSealDesignReport_ARWIDs);
PyTuple_SetItem(args, 47, pyTupleSealCheck_ARIDs);
PyTuple_SetItem(args, 48, pyTupleSealCheck_ARWIDs);
PyTuple_SetItem(args, 49, pyTupleCommentInfos);
PyObject* pRet = PyEval_CallObject(pFunc, args);
const char* szRet = pRet->ob_type->tp_name;
if(*szRet == *err_URLError || *szRet == *err_HTTPError)
return false;
Py_Finalize();
return true;
}

bool EsAddDrillProfileToNetDB(const int nSId, const vector<_DRILLPROFILE>& vec_DrillProfile)
{
if(vec_DrillProfile.empty())
{
return false;
}
Py_Initialize();
if (!Py_IsInitialized())
{
return false;
}
PyRun_SimpleString("import sys");
PyRun_SimpleString("sys.path.append('./')");
PyObject* pModule = NULL;
PyObject* pFunc = NULL;
pModule = PyImport_ImportModule(module_name);
if (pModule == NULL)
{
return false;
}
int nRecordNum = int(vec_DrillProfile.size());
pFunc = PyObject_GetAttrString(pModule, func_add_DrillProfile);
if(pFunc == NULL)
{
return false;
}
PyObject* args = PyTuple_New(16);
PyObject* pyTupleURL = PyTuple_New(1);
PyObject* pyTupleSID = PyTuple_New(1);
PyObject* pyTuplePolylines = PyTuple_New(nRecordNum);
PyObject* pyTupleIDs = PyTuple_New(nRecordNum);
PyObject* pyTupleProjectIDs = PyTuple_New(nRecordNum);
PyObject* pyTupleTargetFaultIDs = PyTuple_New(nRecordNum);
PyObject* pyTupleTargetFaultSources = PyTuple_New(nRecordNum);
PyObject* pyTupleTargetFaultNames = PyTuple_New(nRecordNum);
PyObject* pyTupleNames = PyTuple_New(nRecordNum);
PyObject* pyTupleLocationNames = PyTuple_New(nRecordNum);
PyObject* pyTupleDrillingHoleCounts = PyTuple_New(nRecordNum);
PyObject* pyTupleLengths = PyTuple_New(nRecordNum);
PyObject* pyTupleFaultPointCounts = PyTuple_New(nRecordNum);
PyObject* pyTupleHoleSection_AIIDs = PyTuple_New(nRecordNum);
PyObject* pyTupleHoleSection_ARWIDs = PyTuple_New(nRecordNum);
PyObject* pyTupleCommentInfos = PyTuple_New(nRecordNum);
PyTuple_SetItem(pyTupleURL, 0, StringToPy(url_add_DrillProfile));
PyTuple_SetItem(pyTupleSID, 0, Py_BuildValue("i", nSId));
for (int idx = 0; idx < nRecordNum; idx++)
{
int nPolylineNum = int(vec_DrillProfile[idx]._baseinfo._polyline.size());
int nPolylinePtNumTotal = 0;
int nPolylineEleCount = 0;
vector<int> vecPolylinePtNum;
vecPolylinePtNum.resize(nPolylineNum);
for(int idxLine=0; idxLine<nPolylineNum; idxLine++)
{
vecPolylinePtNum[idxLine] = int(vec_DrillProfile[idx]._baseinfo._polyline[idxLine].size());
nPolylinePtNumTotal += vecPolylinePtNum[idxLine];
}
PyObject* pyTuplePolyline = PyTuple_New(1+nPolylineNum+3*nPolylinePtNumTotal);
PyTuple_SetItem(pyTuplePolyline, nPolylineEleCount, Py_BuildValue("i", nPolylineNum));
nPolylineEleCount++;
for(int idxLine=0; idxLine<nPolylineNum; idxLine++)
{
PyTuple_SetItem(pyTuplePolyline, nPolylineEleCount, Py_BuildValue("i", vecPolylinePtNum[idxLine]));
nPolylineEleCount++;
}
for(int idxLine = 0; idxLine<nPolylineNum; idxLine++)
{
for(int idxPt = 0; idxPt<vecPolylinePtNum[idxLine]; idxPt++)
{
PyTuple_SetItem(pyTuplePolyline, nPolylineEleCount, PyFloat_FromDouble(vec_DrillProfile[idx]._baseinfo._polyline[idxLine][idxPt]._x));
nPolylineEleCount++;
PyTuple_SetItem(pyTuplePolyline, nPolylineEleCount, PyFloat_FromDouble(vec_DrillProfile[idx]._baseinfo._polyline[idxLine][idxPt]._y));
nPolylineEleCount++;
PyTuple_SetItem(pyTuplePolyline, nPolylineEleCount, PyFloat_FromDouble(vec_DrillProfile[idx]._baseinfo._polyline[idxLine][idxPt]._z));
nPolylineEleCount++;
}
}
PyTuple_SetItem(pyTuplePolylines, idx, pyTuplePolyline);
PyTuple_SetItem(pyTupleIDs, idx, StringToPy(WstringToString(vec_DrillProfile[idx]._baseinfo._ID)));
PyTuple_SetItem(pyTupleProjectIDs, idx, StringToPy(WstringToString(vec_DrillProfile[idx]._ProjectID)));
PyTuple_SetItem(pyTupleTargetFaultIDs, idx, StringToPy(WstringToString(vec_DrillProfile[idx]._TargetFaultID)));
PyTuple_SetItem(pyTupleTargetFaultSources, idx, StringToPy(WstringToString(vec_DrillProfile[idx]._TargetFaultSource)));
PyTuple_SetItem(pyTupleTargetFaultNames, idx, StringToPy(WstringToString(vec_DrillProfile[idx]._TargetFaultName)));
PyTuple_SetItem(pyTupleNames, idx, StringToPy(WstringToString(vec_DrillProfile[idx]._Name)));
PyTuple_SetItem(pyTupleLocationNames, idx, StringToPy(WstringToString(vec_DrillProfile[idx]._LocationName)));
PyTuple_SetItem(pyTupleDrillingHoleCounts, idx, Py_BuildValue("i", vec_DrillProfile[idx]._DrillingHoleCount));
PyTuple_SetItem(pyTupleLengths, idx, PyFloat_FromDouble(vec_DrillProfile[idx]._Length));
PyTuple_SetItem(pyTupleFaultPointCounts, idx, Py_BuildValue("i", vec_DrillProfile[idx]._FaultPointCount));
PyTuple_SetItem(pyTupleHoleSection_AIIDs, idx, StringToPy(WstringToString(vec_DrillProfile[idx]._HoleSection_AIID)));
PyTuple_SetItem(pyTupleHoleSection_ARWIDs, idx, StringToPy(WstringToString(vec_DrillProfile[idx]._HoleSection_ARWID)));
PyTuple_SetItem(pyTupleCommentInfos, idx, StringToPy(WstringToString(vec_DrillProfile[idx]._baseinfo._CommentInfo)));
}
PyTuple_SetItem(args, 0, pyTupleURL);
PyTuple_SetItem(args, 1, pyTupleSID);
PyTuple_SetItem(args, 2, pyTuplePolylines);
PyTuple_SetItem(args, 3, pyTupleIDs);
PyTuple_SetItem(args, 4, pyTupleProjectIDs);
PyTuple_SetItem(args, 5, pyTupleTargetFaultIDs);
PyTuple_SetItem(args, 6, pyTupleTargetFaultSources);
PyTuple_SetItem(args, 7, pyTupleTargetFaultNames);
PyTuple_SetItem(args, 8, pyTupleNames);
PyTuple_SetItem(args, 9, pyTupleLocationNames);
PyTuple_SetItem(args, 10, pyTupleDrillingHoleCounts);
PyTuple_SetItem(args, 11, pyTupleLengths);
PyTuple_SetItem(args, 12, pyTupleFaultPointCounts);
PyTuple_SetItem(args, 13, pyTupleHoleSection_AIIDs);
PyTuple_SetItem(args, 14, pyTupleHoleSection_ARWIDs);
PyTuple_SetItem(args, 15, pyTupleCommentInfos);
PyObject* pRet = PyEval_CallObject(pFunc, args);
const char* szRet = pRet->ob_type->tp_name;
if(*szRet == *err_URLError || *szRet == *err_HTTPError)
return false;
Py_Finalize();
return true;
}

