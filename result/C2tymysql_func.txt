bool EsAddCartoAuxLabelToNetDB(const int nSId, const vector<_CARTOAUXLABEL>& vec_CartoAuxLabel)
{
if(vec_CartoAuxLabel.empty())
{
return false;
}
Py_Initialize();
if (!Py_IsInitialized())
{
return false;
}
PyRun_SimpleString("import sys");
PyRun_SimpleString("sys.path.append('./')");
PyObject* pModule = NULL;
PyObject* pFunc = NULL;
pModule = PyImport_ImportModule(module_name);
if (pModule == NULL)
{
return false;
}
int nRecordNum = int(vec_CartoAuxLabel.size());
pFunc = PyObject_GetAttrString(pModule, func_add_CartoAuxLabel);
if(pFunc == NULL)
{
return false;
}
PyObject* args = PyTuple_New(9);
PyObject* pyTupleURL = PyTuple_New(1);
PyObject* pyTupleSID = PyTuple_New(1);
PyObject* pyTuplePoints = PyTuple_New(nRecordNum);
PyObject* pyTupleIDs = PyTuple_New(nRecordNum);
PyObject* pyTupleLabelInfos = PyTuple_New(nRecordNum);
PyObject* pyTupleShowCodes = PyTuple_New(nRecordNum);
PyObject* pyTupleOwnerships = PyTuple_New(nRecordNum);
PyObject* pyTupleDataPurposes = PyTuple_New(nRecordNum);
PyObject* pyTupleCommentInfos = PyTuple_New(nRecordNum);
PyTuple_SetItem(pyTupleURL, 0, StringToPy(url_add_CartoAuxLabel));
PyTuple_SetItem(pyTupleSID, 0, Py_BuildValue("i", nSId));
for (int idx = 0; idx < nRecordNum; idx++)
{
PyObject* pyTuplePoint = PyTuple_New(3);
PyTuple_SetItem(pyTuplePoint, 0, PyFloat_FromDouble(vec_CartoAuxLabel[idx]._baseinfo._point._x));
PyTuple_SetItem(pyTuplePoint, 1, PyFloat_FromDouble(vec_CartoAuxLabel[idx]._baseinfo._point._y));
PyTuple_SetItem(pyTuplePoint, 2, PyFloat_FromDouble(vec_CartoAuxLabel[idx]._baseinfo._point._z));
PyTuple_SetItem(pyTuplePoints, idx, pyTuplePoint);
PyTuple_SetItem(pyTupleIDs, idx, StringToPy(WstringToString(vec_CartoAuxLabel[idx]._baseinfo._ID)));
PyTuple_SetItem(pyTupleLabelInfos, idx, StringToPy(WstringToString(vec_CartoAuxLabel[idx]._baseinfo._LabelInfo)));
PyTuple_SetItem(pyTupleShowCodes, idx, Py_BuildValue("i", vec_CartoAuxLabel[idx]._ShowCode));
PyTuple_SetItem(pyTupleOwnerships, idx, Py_BuildValue("i", vec_CartoAuxLabel[idx]._Ownership));
PyTuple_SetItem(pyTupleDataPurposes, idx, StringToPy(WstringToString(vec_CartoAuxLabel[idx]._baseinfo._DataPurpose)));
PyTuple_SetItem(pyTupleCommentInfos, idx, StringToPy(WstringToString(vec_CartoAuxLabel[idx]._baseinfo._CommentInfo)));
}
PyTuple_SetItem(args, 0, pyTupleURL);
PyTuple_SetItem(args, 1, pyTupleSID);
PyTuple_SetItem(args, 2, pyTuplePoints);
PyTuple_SetItem(args, 3, pyTupleIDs);
PyTuple_SetItem(args, 4, pyTupleLabelInfos);
PyTuple_SetItem(args, 5, pyTupleShowCodes);
PyTuple_SetItem(args, 6, pyTupleOwnerships);
PyTuple_SetItem(args, 7, pyTupleDataPurposes);
PyTuple_SetItem(args, 8, pyTupleCommentInfos);
PyObject* pRet = PyEval_CallObject(pFunc, args);
const char* szRet = pRet->ob_type->tp_name;
if(*szRet == *err_URLError || *szRet == *err_HTTPError)
return false;
Py_Finalize();
return true;
}

bool EsAddCartoAuxLineToNetDB(const int nSId, const vector<_CARTOAUXLINE>& vec_CartoAuxLine)
{
if(vec_CartoAuxLine.empty())
{
return false;
}
Py_Initialize();
if (!Py_IsInitialized())
{
return false;
}
PyRun_SimpleString("import sys");
PyRun_SimpleString("sys.path.append('./')");
PyObject* pModule = NULL;
PyObject* pFunc = NULL;
pModule = PyImport_ImportModule(module_name);
if (pModule == NULL)
{
return false;
}
int nRecordNum = int(vec_CartoAuxLine.size());
pFunc = PyObject_GetAttrString(pModule, func_add_CartoAuxLine);
if(pFunc == NULL)
{
return false;
}
PyObject* args = PyTuple_New(9);
PyObject* pyTupleURL = PyTuple_New(1);
PyObject* pyTupleSID = PyTuple_New(1);
PyObject* pyTuplePolylines = PyTuple_New(nRecordNum);
PyObject* pyTupleIDs = PyTuple_New(nRecordNum);
PyObject* pyTupleLabelInfos = PyTuple_New(nRecordNum);
PyObject* pyTupleShowCodes = PyTuple_New(nRecordNum);
PyObject* pyTupleOwnerships = PyTuple_New(nRecordNum);
PyObject* pyTupleDataPurposes = PyTuple_New(nRecordNum);
PyObject* pyTupleCommentInfos = PyTuple_New(nRecordNum);
PyTuple_SetItem(pyTupleURL, 0, StringToPy(url_add_CartoAuxLine));
PyTuple_SetItem(pyTupleSID, 0, Py_BuildValue("i", nSId));
for (int idx = 0; idx < nRecordNum; idx++)
{
int nPolylineNum = int(vec_CartoAuxLine[idx]._baseinfo._polyline.size());
int nPolylinePtNumTotal = 0;
int nPolylineEleCount = 0;
vector<int> vecPolylinePtNum;
vecPolylinePtNum.resize(nPolylineNum);
for(int idxLine=0; idxLine<nPolylineNum; idxLine++)
{
vecPolylinePtNum[idxLine] = int(vec_CartoAuxLine[idx]._baseinfo._polyline[idxLine].size());
nPolylinePtNumTotal += vecPolylinePtNum[idxLine];
}
PyObject* pyTuplePolyline = PyTuple_New(1+nPolylineNum+3*nPolylinePtNumTotal);
PyTuple_SetItem(pyTuplePolyline, nPolylineEleCount, Py_BuildValue("i", nPolylineNum));
nPolylineEleCount++;
for(int idxLine=0; idxLine<nPolylineNum; idxLine++)
{
PyTuple_SetItem(pyTuplePolyline, nPolylineEleCount, Py_BuildValue("i", vecPolylinePtNum[idxLine]));
nPolylineEleCount++;
}
for(int idxLine = 0; idxLine<nPolylineNum; idxLine++)
{
for(int idxPt = 0; idxPt<vecPolylinePtNum[idxLine]; idxPt++)
{
PyTuple_SetItem(pyTuplePolyline, nPolylineEleCount, PyFloat_FromDouble(vec_CartoAuxLine[idx]._baseinfo._polyline[idxLine][idxPt]._x));
nPolylineEleCount++;
PyTuple_SetItem(pyTuplePolyline, nPolylineEleCount, PyFloat_FromDouble(vec_CartoAuxLine[idx]._baseinfo._polyline[idxLine][idxPt]._y));
nPolylineEleCount++;
PyTuple_SetItem(pyTuplePolyline, nPolylineEleCount, PyFloat_FromDouble(vec_CartoAuxLine[idx]._baseinfo._polyline[idxLine][idxPt]._z));
nPolylineEleCount++;
}
}
PyTuple_SetItem(pyTuplePolylines, idx, pyTuplePolyline);
PyTuple_SetItem(pyTupleIDs, idx, StringToPy(WstringToString(vec_CartoAuxLine[idx]._baseinfo._ID)));
PyTuple_SetItem(pyTupleLabelInfos, idx, StringToPy(WstringToString(vec_CartoAuxLine[idx]._baseinfo._LabelInfo)));
PyTuple_SetItem(pyTupleShowCodes, idx, Py_BuildValue("i", vec_CartoAuxLine[idx]._ShowCode));
PyTuple_SetItem(pyTupleOwnerships, idx, Py_BuildValue("i", vec_CartoAuxLine[idx]._Ownership));
PyTuple_SetItem(pyTupleDataPurposes, idx, StringToPy(WstringToString(vec_CartoAuxLine[idx]._baseinfo._DataPurpose)));
PyTuple_SetItem(pyTupleCommentInfos, idx, StringToPy(WstringToString(vec_CartoAuxLine[idx]._baseinfo._CommentInfo)));
}
PyTuple_SetItem(args, 0, pyTupleURL);
PyTuple_SetItem(args, 1, pyTupleSID);
PyTuple_SetItem(args, 2, pyTuplePolylines);
PyTuple_SetItem(args, 3, pyTupleIDs);
PyTuple_SetItem(args, 4, pyTupleLabelInfos);
PyTuple_SetItem(args, 5, pyTupleShowCodes);
PyTuple_SetItem(args, 6, pyTupleOwnerships);
PyTuple_SetItem(args, 7, pyTupleDataPurposes);
PyTuple_SetItem(args, 8, pyTupleCommentInfos);
PyObject* pRet = PyEval_CallObject(pFunc, args);
const char* szRet = pRet->ob_type->tp_name;
if(*szRet == *err_URLError || *szRet == *err_HTTPError)
return false;
Py_Finalize();
return true;
}

bool EsAddCartoAuxPointToNetDB(const int nSId, const vector<_CARTOAUXPOINT>& vec_CartoAuxPoint)
{
if(vec_CartoAuxPoint.empty())
{
return false;
}
Py_Initialize();
if (!Py_IsInitialized())
{
return false;
}
PyRun_SimpleString("import sys");
PyRun_SimpleString("sys.path.append('./')");
PyObject* pModule = NULL;
PyObject* pFunc = NULL;
pModule = PyImport_ImportModule(module_name);
if (pModule == NULL)
{
return false;
}
int nRecordNum = int(vec_CartoAuxPoint.size());
pFunc = PyObject_GetAttrString(pModule, func_add_CartoAuxPoint);
if(pFunc == NULL)
{
return false;
}
PyObject* args = PyTuple_New(9);
PyObject* pyTupleURL = PyTuple_New(1);
PyObject* pyTupleSID = PyTuple_New(1);
PyObject* pyTuplePoints = PyTuple_New(nRecordNum);
PyObject* pyTupleIDs = PyTuple_New(nRecordNum);
PyObject* pyTupleLabelInfos = PyTuple_New(nRecordNum);
PyObject* pyTupleShowCodes = PyTuple_New(nRecordNum);
PyObject* pyTupleOwnerships = PyTuple_New(nRecordNum);
PyObject* pyTupleDataPurposes = PyTuple_New(nRecordNum);
PyObject* pyTupleCommentInfos = PyTuple_New(nRecordNum);
PyTuple_SetItem(pyTupleURL, 0, StringToPy(url_add_CartoAuxPoint));
PyTuple_SetItem(pyTupleSID, 0, Py_BuildValue("i", nSId));
for (int idx = 0; idx < nRecordNum; idx++)
{
PyObject* pyTuplePoint = PyTuple_New(3);
PyTuple_SetItem(pyTuplePoint, 0, PyFloat_FromDouble(vec_CartoAuxPoint[idx]._baseinfo._point._x));
PyTuple_SetItem(pyTuplePoint, 1, PyFloat_FromDouble(vec_CartoAuxPoint[idx]._baseinfo._point._y));
PyTuple_SetItem(pyTuplePoint, 2, PyFloat_FromDouble(vec_CartoAuxPoint[idx]._baseinfo._point._z));
PyTuple_SetItem(pyTuplePoints, idx, pyTuplePoint);
PyTuple_SetItem(pyTupleIDs, idx, StringToPy(WstringToString(vec_CartoAuxPoint[idx]._baseinfo._ID)));
PyTuple_SetItem(pyTupleLabelInfos, idx, StringToPy(WstringToString(vec_CartoAuxPoint[idx]._baseinfo._LabelInfo)));
PyTuple_SetItem(pyTupleShowCodes, idx, Py_BuildValue("i", vec_CartoAuxPoint[idx]._ShowCode));
PyTuple_SetItem(pyTupleOwnerships, idx, Py_BuildValue("i", vec_CartoAuxPoint[idx]._Ownership));
PyTuple_SetItem(pyTupleDataPurposes, idx, StringToPy(WstringToString(vec_CartoAuxPoint[idx]._baseinfo._DataPurpose)));
PyTuple_SetItem(pyTupleCommentInfos, idx, StringToPy(WstringToString(vec_CartoAuxPoint[idx]._baseinfo._CommentInfo)));
}
PyTuple_SetItem(args, 0, pyTupleURL);
PyTuple_SetItem(args, 1, pyTupleSID);
PyTuple_SetItem(args, 2, pyTuplePoints);
PyTuple_SetItem(args, 3, pyTupleIDs);
PyTuple_SetItem(args, 4, pyTupleLabelInfos);
PyTuple_SetItem(args, 5, pyTupleShowCodes);
PyTuple_SetItem(args, 6, pyTupleOwnerships);
PyTuple_SetItem(args, 7, pyTupleDataPurposes);
PyTuple_SetItem(args, 8, pyTupleCommentInfos);
PyObject* pRet = PyEval_CallObject(pFunc, args);
const char* szRet = pRet->ob_type->tp_name;
if(*szRet == *err_URLError || *szRet == *err_HTTPError)
return false;
Py_Finalize();
return true;
}

bool EsAddCartoAuxPolygonToNetDB(const int nSId, const vector<_CARTOAUXPOLYGON>& vec_CartoAuxPolygon)
{
if(vec_CartoAuxPolygon.empty())
{
return false;
}
Py_Initialize();
if (!Py_IsInitialized())
{
return false;
}
PyRun_SimpleString("import sys");
PyRun_SimpleString("sys.path.append('./')");
PyObject* pModule = NULL;
PyObject* pFunc = NULL;
pModule = PyImport_ImportModule(module_name);
if (pModule == NULL)
{
return false;
}
int nRecordNum = int(vec_CartoAuxPolygon.size());
pFunc = PyObject_GetAttrString(pModule, func_add_CartoAuxPolygon);
if(pFunc == NULL)
{
return false;
}
PyObject* args = PyTuple_New(9);
PyObject* pyTupleURL = PyTuple_New(1);
PyObject* pyTupleSID = PyTuple_New(1);
PyObject* pyTuplePolygons = PyTuple_New(nRecordNum);
PyObject* pyTupleIDs = PyTuple_New(nRecordNum);
PyObject* pyTupleLabelInfos = PyTuple_New(nRecordNum);
PyObject* pyTupleShowCodes = PyTuple_New(nRecordNum);
PyObject* pyTupleOwnerships = PyTuple_New(nRecordNum);
PyObject* pyTupleDataPurposes = PyTuple_New(nRecordNum);
PyObject* pyTupleCommentInfos = PyTuple_New(nRecordNum);
PyTuple_SetItem(pyTupleURL, 0, StringToPy(url_add_CartoAuxPolygon));
PyTuple_SetItem(pyTupleSID, 0, Py_BuildValue("i", nSId));
for (int idx = 0; idx < nRecordNum; idx++)
{
int nPolylineNum = int(vec_CartoAuxPolygon[idx]._baseinfo._polygon.size());
int nPolylinePtNumTotal = 0;
int nPolylineEleCount = 0;
vector<int> vecPolylinePtNum;
vecPolylinePtNum.resize(nPolylineNum);
for(int idxLine=0; idxLine<nPolylineNum; idxLine++)
{
vecPolylinePtNum[idxLine] = int(vec_CartoAuxPolygon[idx]._baseinfo._polyline[idxLine].size());
nPolylinePtNumTotal += vecPolylinePtNum[idxLine];
}
PyObject* pyTuplePolygon = PyTuple_New(1+nPolylineNum+3*nPolylinePtNumTotal);
PyTuple_SetItem(pyTuplePolygon, nPolylineEleCount, Py_BuildValue("i", nPolylineNum));
nPolylineEleCount++;
for(int idxLine=0; idxLine<nPolylineNum; idxLine++)
{
PyTuple_SetItem(pyTuplePolygon, nPolylineEleCount, Py_BuildValue("i", vecPolylinePtNum[idxLine]));
nPolylineEleCount++;
}
for(int idxLine = 0; idxLine<nPolylineNum; idxLine++)
{
for(int idxPt = 0; idxPt<vecPolylinePtNum[idxLine]; idxPt++)
{
PyTuple_SetItem(pyTuplePolygon, nPolylineEleCount, PyFloat_FromDouble(vec_CartoAuxPolygon[idx]._baseinfo._polygon[idxLine][idxPt]._x));
nPolylineEleCount++;
PyTuple_SetItem(pyTuplePolygon, nPolylineEleCount, PyFloat_FromDouble(vec_CartoAuxPolygon[idx]._baseinfo._polygon[idxLine][idxPt]._y));
nPolylineEleCount++;
PyTuple_SetItem(pyTuplePolygon, nPolylineEleCount, PyFloat_FromDouble(vec_CartoAuxPolygon[idx]._baseinfo._polygon[idxLine][idxPt]._z));
nPolylineEleCount++;
}
}
PyTuple_SetItem(pyTuplePolygons, idx, pyTuplePolygon);
PyTuple_SetItem(pyTupleIDs, idx, StringToPy(WstringToString(vec_CartoAuxPolygon[idx]._baseinfo._ID)));
PyTuple_SetItem(pyTupleLabelInfos, idx, StringToPy(WstringToString(vec_CartoAuxPolygon[idx]._baseinfo._LabelInfo)));
PyTuple_SetItem(pyTupleShowCodes, idx, Py_BuildValue("i", vec_CartoAuxPolygon[idx]._ShowCode));
PyTuple_SetItem(pyTupleOwnerships, idx, Py_BuildValue("i", vec_CartoAuxPolygon[idx]._Ownership));
PyTuple_SetItem(pyTupleDataPurposes, idx, StringToPy(WstringToString(vec_CartoAuxPolygon[idx]._baseinfo._DataPurpose)));
PyTuple_SetItem(pyTupleCommentInfos, idx, StringToPy(WstringToString(vec_CartoAuxPolygon[idx]._baseinfo._CommentInfo)));
}
PyTuple_SetItem(args, 0, pyTupleURL);
PyTuple_SetItem(args, 1, pyTupleSID);
PyTuple_SetItem(args, 2, pyTuplePolygons);
PyTuple_SetItem(args, 3, pyTupleIDs);
PyTuple_SetItem(args, 4, pyTupleLabelInfos);
PyTuple_SetItem(args, 5, pyTupleShowCodes);
PyTuple_SetItem(args, 6, pyTupleOwnerships);
PyTuple_SetItem(args, 7, pyTupleDataPurposes);
PyTuple_SetItem(args, 8, pyTupleCommentInfos);
PyObject* pRet = PyEval_CallObject(pFunc, args);
const char* szRet = pRet->ob_type->tp_name;
if(*szRet == *err_URLError || *szRet == *err_HTTPError)
return false;
Py_Finalize();
return true;
}

bool EsAddGeoProfilePointToNetDB(const int nSId, const vector<_GEOPROFILEPOINT>& vec_GeoProfilePoint)
{
if(vec_GeoProfilePoint.empty())
{
return false;
}
Py_Initialize();
if (!Py_IsInitialized())
{
return false;
}
PyRun_SimpleString("import sys");
PyRun_SimpleString("sys.path.append('./')");
PyObject* pModule = NULL;
PyObject* pFunc = NULL;
pModule = PyImport_ImportModule(module_name);
if (pModule == NULL)
{
return false;
}
int nRecordNum = int(vec_GeoProfilePoint.size());
pFunc = PyObject_GetAttrString(pModule, func_add_GeoProfilePoint);
if(pFunc == NULL)
{
return false;
}
PyObject* args = PyTuple_New(8);
PyObject* pyTupleURL = PyTuple_New(1);
PyObject* pyTupleSID = PyTuple_New(1);
PyObject* pyTuplePoints = PyTuple_New(nRecordNum);
PyObject* pyTupleIDs = PyTuple_New(nRecordNum);
PyObject* pyTupleProfileLineIDs = PyTuple_New(nRecordNum);
PyObject* pyTupleNames = PyTuple_New(nRecordNum);
PyObject* pyTupleScales = PyTuple_New(nRecordNum);
PyObject* pyTupleCommentInfos = PyTuple_New(nRecordNum);
PyTuple_SetItem(pyTupleURL, 0, StringToPy(url_add_GeoProfilePoint));
PyTuple_SetItem(pyTupleSID, 0, Py_BuildValue("i", nSId));
for (int idx = 0; idx < nRecordNum; idx++)
{
PyObject* pyTuplePoint = PyTuple_New(3);
PyTuple_SetItem(pyTuplePoint, 0, PyFloat_FromDouble(vec_GeoProfilePoint[idx]._baseinfo._point._x));
PyTuple_SetItem(pyTuplePoint, 1, PyFloat_FromDouble(vec_GeoProfilePoint[idx]._baseinfo._point._y));
PyTuple_SetItem(pyTuplePoint, 2, PyFloat_FromDouble(vec_GeoProfilePoint[idx]._baseinfo._point._z));
PyTuple_SetItem(pyTuplePoints, idx, pyTuplePoint);
PyTuple_SetItem(pyTupleIDs, idx, StringToPy(WstringToString(vec_GeoProfilePoint[idx]._baseinfo._ID)));
PyTuple_SetItem(pyTupleProfileLineIDs, idx, StringToPy(WstringToString(vec_GeoProfilePoint[idx]._baseinfo._ProfileLineID)));
PyTuple_SetItem(pyTupleNames, idx, StringToPy(WstringToString(vec_GeoProfilePoint[idx]._baseinfo._Name)));
PyTuple_SetItem(pyTupleScales, idx, Py_BuildValue("i", vec_GeoProfilePoint[idx]._Scale));
PyTuple_SetItem(pyTupleCommentInfos, idx, StringToPy(WstringToString(vec_GeoProfilePoint[idx]._baseinfo._CommentInfo)));
}
PyTuple_SetItem(args, 0, pyTupleURL);
PyTuple_SetItem(args, 1, pyTupleSID);
PyTuple_SetItem(args, 2, pyTuplePoints);
PyTuple_SetItem(args, 3, pyTupleIDs);
PyTuple_SetItem(args, 4, pyTupleProfileLineIDs);
PyTuple_SetItem(args, 5, pyTupleNames);
PyTuple_SetItem(args, 6, pyTupleScales);
PyTuple_SetItem(args, 7, pyTupleCommentInfos);
PyObject* pRet = PyEval_CallObject(pFunc, args);
const char* szRet = pRet->ob_type->tp_name;
if(*szRet == *err_URLError || *szRet == *err_HTTPError)
return false;
Py_Finalize();
return true;
}

bool EsAddMapSheetToNetDB(const int nSId, const vector<_MAPSHEET>& vec_MapSheet)
{
if(vec_MapSheet.empty())
{
return false;
}
Py_Initialize();
if (!Py_IsInitialized())
{
return false;
}
PyRun_SimpleString("import sys");
PyRun_SimpleString("sys.path.append('./')");
PyObject* pModule = NULL;
PyObject* pFunc = NULL;
pModule = PyImport_ImportModule(module_name);
if (pModule == NULL)
{
return false;
}
int nRecordNum = int(vec_MapSheet.size());
pFunc = PyObject_GetAttrString(pModule, func_add_MapSheet);
if(pFunc == NULL)
{
return false;
}
PyObject* args = PyTuple_New(7);
PyObject* pyTupleURL = PyTuple_New(1);
PyObject* pyTupleSID = PyTuple_New(1);
PyObject* pyTuplePolygons = PyTuple_New(nRecordNum);
PyObject* pyTupleIDs = PyTuple_New(nRecordNum);
PyObject* pyTupleSheetNumbers = PyTuple_New(nRecordNum);
PyObject* pyTupleRotationAngles = PyTuple_New(nRecordNum);
PyObject* pyTupleCommentInfos = PyTuple_New(nRecordNum);
PyTuple_SetItem(pyTupleURL, 0, StringToPy(url_add_MapSheet));
PyTuple_SetItem(pyTupleSID, 0, Py_BuildValue("i", nSId));
for (int idx = 0; idx < nRecordNum; idx++)
{
int nPolylineNum = int(vec_MapSheet[idx]._baseinfo._polygon.size());
int nPolylinePtNumTotal = 0;
int nPolylineEleCount = 0;
vector<int> vecPolylinePtNum;
vecPolylinePtNum.resize(nPolylineNum);
for(int idxLine=0; idxLine<nPolylineNum; idxLine++)
{
vecPolylinePtNum[idxLine] = int(vec_MapSheet[idx]._baseinfo._polyline[idxLine].size());
nPolylinePtNumTotal += vecPolylinePtNum[idxLine];
}
PyObject* pyTuplePolygon = PyTuple_New(1+nPolylineNum+3*nPolylinePtNumTotal);
PyTuple_SetItem(pyTuplePolygon, nPolylineEleCount, Py_BuildValue("i", nPolylineNum));
nPolylineEleCount++;
for(int idxLine=0; idxLine<nPolylineNum; idxLine++)
{
PyTuple_SetItem(pyTuplePolygon, nPolylineEleCount, Py_BuildValue("i", vecPolylinePtNum[idxLine]));
nPolylineEleCount++;
}
for(int idxLine = 0; idxLine<nPolylineNum; idxLine++)
{
for(int idxPt = 0; idxPt<vecPolylinePtNum[idxLine]; idxPt++)
{
PyTuple_SetItem(pyTuplePolygon, nPolylineEleCount, PyFloat_FromDouble(vec_MapSheet[idx]._baseinfo._polygon[idxLine][idxPt]._x));
nPolylineEleCount++;
PyTuple_SetItem(pyTuplePolygon, nPolylineEleCount, PyFloat_FromDouble(vec_MapSheet[idx]._baseinfo._polygon[idxLine][idxPt]._y));
nPolylineEleCount++;
PyTuple_SetItem(pyTuplePolygon, nPolylineEleCount, PyFloat_FromDouble(vec_MapSheet[idx]._baseinfo._polygon[idxLine][idxPt]._z));
nPolylineEleCount++;
}
}
PyTuple_SetItem(pyTuplePolygons, idx, pyTuplePolygon);
PyTuple_SetItem(pyTupleIDs, idx, StringToPy(WstringToString(vec_MapSheet[idx]._baseinfo._ID)));
PyTuple_SetItem(pyTupleSheetNumbers, idx, StringToPy(WstringToString(vec_MapSheet[idx]._baseinfo._SheetNumber)));
PyTuple_SetItem(pyTupleRotationAngles, idx, PyFloat_FromDouble(vec_MapSheet[idx]._RotationAngle));
PyTuple_SetItem(pyTupleCommentInfos, idx, StringToPy(WstringToString(vec_MapSheet[idx]._baseinfo._CommentInfo)));
}
PyTuple_SetItem(args, 0, pyTupleURL);
PyTuple_SetItem(args, 1, pyTupleSID);
PyTuple_SetItem(args, 2, pyTuplePolygons);
PyTuple_SetItem(args, 3, pyTupleIDs);
PyTuple_SetItem(args, 4, pyTupleSheetNumbers);
PyTuple_SetItem(args, 5, pyTupleRotationAngles);
PyTuple_SetItem(args, 6, pyTupleCommentInfos);
PyObject* pRet = PyEval_CallObject(pFunc, args);
const char* szRet = pRet->ob_type->tp_name;
if(*szRet == *err_URLError || *szRet == *err_HTTPError)
return false;
Py_Finalize();
return true;
}

